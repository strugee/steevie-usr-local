#!/bin/sh

# TODO make sure this handles LXD datasets right?

set -eu

. $(dirname $0)/../lib/run-borg/functions.sh

BORG_FLAGS=''
BORG_TAG=''

while ! [ -z ${1+x} ]; do
	if [ $1 = '-v' ]; then
		BORG_FLAGS="$BORG_FLAGS -v"
		shift
		continue
	fi

	if [ $1 = '-l' ]; then
		BORG_FLAGS="$BORG_FLAGS --list"
		shift
		continue
	fi

	if [ $1 = '-t' ]; then
		BORG_TAG="-tag-$2"
		shift
		shift
		continue
	fi
done

test_is_root

DOTLOCK_ARGS=""

log_info 'starting run-borg'

lockfile_acquire
trap lockfile_release EXIT

# Garbage-collect old staging snapshots in case we somehow failed to clean up last time
gc_if_needed

# Freeze a view of the filesystem so Borg backups are atomic
freeze_fs
trap 'gc; lockfile_release' EXIT

# It takes a *long* time to walk system directories so we only do so when
# triggered to do so by a dpkg postrun hook.
# Note that we always walk /usr/local because modifying that won't trigger
# the dpkg hook. Ditto with /usr/lib/node_modules and npm. /boot isn't there
# either because of tools like update-initramfs.
SYSTEM_DIRS='usr/local usr/lib/node_modules'
if test -e /var/local/borg-trigger-system-backup; then
	SYSTEM_DIRS='bin lib lib64 sbin usr'
	BORG_TAG='-withsystem$BORG_TAG'
	log_info 'we are running a full-system backup'
fi

cd /media/borg-stage

invoke_borg \
etc \
home \
srv \
root \
var \
opt \
/boot \
lost+found \
vmlinuz* \
initrd.img* \
snap \
lxd \
$SYSTEM_DIRS

# We don't do this in a `trap`ped cleanup routine so that it is left for next time if the script fails.
rm -f /var/local/borg-trigger-system-backup
log_info 'removed borg-trigger-system-backup'

log_info 'run complete'
